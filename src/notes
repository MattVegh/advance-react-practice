React recursively renders components down one branch until there are no more to render.

Changes to state or props in any component will recursively re-render down the remaining tree
whether those components have changed or not. 

shouldComponentUpdate(), React.PureComponent, and React.memo() are tools to help this this problem.

shouldComponentUpdate(nextProps, nextState)
    Lifecycle method on class components
    Allows you to determine if a component should update or not
    Recieves the upcoming props and state so you can compare them against current props and state
    return true for "yes", false for "no"
    Don't do deep equality checks in shouldComponentUpdate()

React.PureComponent
    Alternative to React.component
    Automatically implements shouldComponentUpdate() for shallow props and state comparisons
    Disallows using shouldComponentUpdate() manually
    Skips rendering all children in the tree automatically, so they must be "pure" as well
    Generally preferred over shouldComponentUpdate()

React.memo()
    Higher-order component built by React (release in v16.6)
    Pretty much the same as PureComponent, but for functional components
    Only compares prevProps and nextProps (no state checking)
    You can optionally implement your own checking function to determine if it should use the memoized result
        this function is kind of like shouldComponentUpdate(), except it should return true if the props are equal,
        and false if they aren't. This is effectively the opposite approach of shouldComponentUpdate(),
        which returns true if the component should re-render (props are different)
        